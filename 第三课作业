第一题：

pragma solidity ^0.4.14;
 
 contract Payroll{
     
     struct Employee {
         address id;
         uint    salary;
         uint    lastPayday;
     }
     
     uint constant payDuration = 10 seconds;
     uint          totalSalary = 0;
     address       owner;
     mapping(address => Employee) public employees;
     
     function Payroll() {
         owner = msg.sender;
     }
     
     modifier onlyOwner {
         require(msg.sender == owner);
         _;
     }
     
     modifier employeeExist(address employeeId) {
         var employee = employees[employeeId];
         assert(employee.id != 0x0);
         _;
     }
     
     function _partialPaid(Employee employee) private {
         uint payment = employee.salary * (now - employee.lastPayday) / payDuration;
        if (0 == payment) {
             return;
         }
         employee.id.transfer(payment);
     }
 
     function addTenEmployees() onlyOwner {
 
         addEmployee(0x1, 1);
         addEmployee(0x2, 1);
         addEmployee(0x3, 1);
         addEmployee(0x4, 1);
         addEmployee(0x5, 1);
         addEmployee(0x6, 1);
         addEmployee(0x7, 1);
         addEmployee(0x8, 1);
         addEmployee(0x9, 1);
         addEmployee(0xA, 1);
     }
     
     function addEmployee(address employeeId, uint salary) onlyOwner {
         var employee = employees[employeeId];
         assert(employee.id == 0x0);     // can't find
         
         uint tmp = salary * 1 ether;
         employees[employeeId] = Employee(employeeId, tmp, now);
         totalSalary += tmp;
     }
     
     function removeEmployee(address employeeId) onlyOwner employeeExist(employeeId) {
         var employee = employees[employeeId];
         
         _partialPaid(employee);
         
         totalSalary -= employees[employeeId].salary;
         delete employees[employeeId];
     }
     
     function updateEmployee(address employeeId, uint salary) onlyOwner employeeExist(employeeId) {
         var employee = employees[employeeId];
         
         _partialPaid(employee);
         
         uint tmp = salary * 1 ether;
         totalSalary += (tmp - employees[employeeId].salary);
         employees[employeeId].salary     = tmp;
         employees[employeeId].lastPayday = now;
     }
     
     
     function addFund() payable returns (uint) {
         return this.balance;
     }
     
     function calculateRunway() returns (uint) {
         return this.balance / totalSalary;
     }
     
     function hasEnoughFund() returns (bool) {
         return calculateRunway() > 0;
     }
     
     function getPaid() employeeExist(msg.sender) {
         var employee = employees[msg.sender];
         
         uint nextPayday = employee.lastPayday + payDuration;
         assert(nextPayday < now);
 
         employees[msg.sender].lastPayday = nextPayday;
         employee.id.transfer(employee.salary);
     }
 }
 
 
 
 
 第二题：
 
 function changePaymentAddress(address employeeId, address newId) onlyOwner employeeExist(employeeId) {
        var employee = employees[employeeId];
        employee[employeeId] = Employee(newEmployeeId, employee.salary, employee.lastPayday);
        delete employees[employeeId];
    }
