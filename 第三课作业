pragma solidity ^0.4.14;
import './SafeMath.sol';
contract Payroll {
    struct Employee {
        address id;
        uint salary;
        uint lastPayday;
    }
    using SafeMath for uint;
    uint constant payDuration = 10 seconds;
    uint totalSalary ;
    address owner;  
    mapping  (address=>Employee)  public employees; 
    
 
    event aaa(address a);
    
    function Payroll() {
        owner = msg.sender;
    }
    modifier onlyowner {
         require (msg.sender == owner);
         _;
    }
    
     modifier employeeExist(address employeeId) {
         var employee = employees[employeeId];
         assert(employee.id != 0x0);
         _;
    }
    
    function _partialPaid(Employee employee) private {
        uint payment = employee.salary * (now - employee.lastPayday)/payDuration;
        employee.id.transfer(payment);
    }
    
    function _findEmployee(address employeeId) private returns (Employee , uint) {
    }

    function addEmployee(address employeeId, uint salary) 
       onlyowner {  
       var employee = employees[employeeId];
       assert(employee.id == 0x0);
       employees[employeeId] = Employee(employeeId,salary * 1 ether, now);
       totalSalary = totalSalary.add(salary* 1 ether);
    }

    function removeEmployee(address employeeId) 
    onlyowner employeeExist(employeeId){
         var employee = employees[employeeId];
         _partialPaid(employee);
         totalSalary = totalSalary.sub(employee.salary);
         delete employees[employeeId];
    }
    
    function updateEmployee(address employeeId, uint salary) 
    onlyowner employeeExist(employeeId){
         var employee = employees[employeeId];
         _partialPaid(employee);
         employees[employeeId].salary = salary * 1 ether;
         employees[employeeId].lastPayday = now;
         totalSalary=totalSalary-employee.salary+salary * 1 ether;
    
    }
    
    function changePaymentAddress(address oldAddress, address newAddress)
         onlyowner  employeeExist(oldAddress){
         var emp = employees[oldAddress];
         _partialPaid(emp);
         employees[newAddress] = Employee(newAddress, emp.salary, emp.lastPayday);
         delete employees[oldAddress];
     }
    
    
    function addFund()onlyowner payable returns (uint) {
         return this.balance;
    }

    function calculateRunway()public view returns (uint) {
     //   return totalSalary;
        return this.balance / totalSalary;
    }
    
    
    function balanceOf() public view returns(uint)
    {
        return this.balance;
    }
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() employeeExist(msg.sender){
          aaa(msg.sender);
          var employee = employees[msg.sender];
          uint nextPayday = employee.lastPayday + payDuration;
          assert(now>nextPayday);
          employees[msg.sender].lastPayday = nextPayday;
          employee.id.transfer(employee.salary);
    }
}




pragma solidity ^0.4.18;


/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}




附加题：
O[O],
A[A,O],
B[B,O],
C[C,O],
K1[K1,A,B,O],
K2[K2,A,C,O],
Z【K1,K2,A,B,C,O】
}
 
